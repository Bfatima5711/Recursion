*********Problem Statement*************


*********Combination Sum III*********
Find all valid combinations of k numbers that sum up to n such that the following conditions are true:

Only numbers 1 through 9 are used.
Each number is used at most once.
Return a list of all possible valid combinations. The list must not contain the same combination twice, and the combinations may be returned in any order.

 

Example 1:

Input: k = 3, n = 7
Output: [[1,2,4]]
Explanation:
1 + 2 + 4 = 7
There are no other valid combinations.
Example 2:

Input: k = 3, n = 9
Output: [[1,2,6],[1,3,5],[2,3,4]]
Explanation:
1 + 2 + 6 = 9
1 + 3 + 5 = 9
2 + 3 + 4 = 9
There are no other valid combinations.
Example 3:

Input: k = 4, n = 1
Output: []
Explanation: There are no valid combinations.
Using 4 different numbers in the range [1,9], the smallest sum we can get is 1+2+3+4 = 10 and since 10 > 1, there are no valid combination.
 

Constraints:

2 <= k <= 9
1 <= n <= 60
**********Code**********

class Solution {
    public void findCombinations(int[] arr, int ind, int size, int n, int target, List<Integer> list,
    List<List<Integer>> ans){
        if(size == n){
            if(target == 0){
                if(!ans.contains(list)){
                    ans.add(new ArrayList<>(list));
                }
            }
            return;
        }
        if( ind < arr.length && arr[ind] <= target){
            list.add(arr[ind]);
            findCombinations(arr, ind+1, list.size(), n, target-arr[ind], list, ans);
            list.remove(list.size()-1);
        }
        if(ind < arr.length )
        findCombinations(arr, ind+1, list.size(), n, target, list, ans);
    }
    //TC:O(2^t)*k  here t is the target and k is the time required pot list el into 
    //ans list SC:(k*x) k is the arr length x is the no of combinations
    public List<List<Integer>> combinationSum3(int k, int target) {
        List<List<Integer>> ans = new ArrayList<>();
        List<Integer> list = new ArrayList<>();
        int candidates[] = {1, 2, 3, 4, 5, 6, 7, 8, 9};
        int n = k;
        findCombinations(candidates, 0, list.size(), n, target, list, ans);

        return ans;
    }
}