*********Problem Statement*************


*********Combination Sum II*********


Given a collection of candidate numbers (candidates) and a target number (target), find all unique combinations in candidates where the candidate numbers sum to target.

Each number in candidates may only be used once in the combination.

Note: The solution set must not contain duplicate combinations.

 

Example 1:

Input: candidates = [10,1,2,7,6,1,5], target = 8
Output: 
[
[1,1,6],
[1,2,5],
[1,7],
[2,6]
]
Example 2:

Input: candidates = [2,5,2,1,2], target = 5
Output: 
[
[1,2,2],
[5]
]
 

Constraints:

1 <= candidates.length <= 100
1 <= candidates[i] <= 50
1 <= target <= 30




*********Code***********

class Solution {
    // public void findCombinations(int[] arr, int ind, int n, int target, List<Integer> list,
    // List<List<Integer>> ans){
    //     //Approach 1: TC:O(2^t)*k + O(nlogn)
    //     if(ind == n){
    //         if(target == 0){
    //             if(!ans.contains(list)){
    //                 ans.add(new ArrayList<>(list));
    //             }
    //         }
    //         return;
    //     }
    //     if(arr[ind] <= target){
    //         list.add(arr[ind]);
    //         findCombinations(arr, ind+1, n, target-arr[ind], list, ans);
    //         list.remove(list.size()-1);
    //     }
    //     findCombinations(arr, ind+1, n, target, list, ans);
    // } 

    public void findCombinations(int[] arr, int ind, int n, int target, List<Integer> list,
    List<List<Integer>> ans){
        if(target == 0){
            ans.add(new ArrayList<>(list));
            return;
        }

        for(int i=ind; i<n; i++){
            if((i > ind) && arr[i] == arr[i-1]) continue;
            if(arr[i] > target) break;

            list.add(arr[i]);
            findCombinations(arr, i+1, n, target-arr[i], list, ans);
            list.remove(list.size()-1);
        }
    }

    public List<List<Integer>> combinationSum2(int[] candidates, int target) {
       //TC:O(2^t)*k + O(nlogn)  here t is the target and k is the time required pot list 
       //el into ans list SC:(k*x) k is the arr length x is the no of combinations
        Arrays.sort(candidates);
       List<List<Integer>> ans = new ArrayList<>();
       List<Integer> list = new ArrayList<>();
       int n = candidates.length;
       findCombinations(candidates, 0, n, target, list, ans);
       return ans;
    }
    
}