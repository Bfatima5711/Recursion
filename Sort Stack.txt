*****Sort Stack******

******Problem statement*******
You are given a stack ‘S’. Your task is to sort the sack recursively.



Note:
Looping through the stack is not allowed.
You need to return a stack that is sorted in descending order.


For example:
Given stack S = 1 3 2 
The output will be 3 2 1 since it is the sorted order.
Detailed explanation ( Input/output format, Notes, Images )
Sample Input 1 :
2
4
1 0 0 2 
3 
2 4 2
Sample Output 1 :
2 1 0 0
4 4 2
Explanation of the Sample Input 1:
For the first test case:
For the given stack, the resultant sorted stack would be 0 0 1 2.  

For the second test case:
For the given stack, the resulting sorted stack would be 2 2 4.   
Sample Input 2 :
2
4
1 2 3 4     
3    
5 1 2
Sample Output 2 :
4 3 2 1 
5 2 1
Constraints:
1 <= T <= 5
1 <=  N <= 2000
0 <= S[i] <= 1000

Where ‘T’ is the total number of test cases, and 'N’ is the size of the stack, and 'S[i]' is the element of the stack.


*****Code*****

import java.util.* ;
import java.io.*; 
public class Solution {
	public static void sortedInsert(Stack<Integer> s,int num){
		if(s.isEmpty() ||(s.peek() < num)){
			s.add(num);
			return;
		}

		int topEl = s.peek();
		s.pop();

		sortedInsert(s, num);

		s.add(topEl);
	}
	public static Stack<Integer> sortStack(Stack<Integer> s) {
		////Overall TC of this logic is TC:O(n^2) SC:O(n) recoursion stack space
			if(s.isEmpty()){
				return s;
			}

			int topEl = s.peek();
			s.pop();

			sortStack(s);

			sortedInsert(s, topEl);
			return s;
	}
}
