*******Problem Statement***********

**********N-Queens**********

The n-queens puzzle is the problem of placing n queens on an n x n chessboard such that no two queens attack each other.

Given an integer n, return all distinct solutions to the n-queens puzzle. You may return the answer in any order.

Each solution contains a distinct board configuration of the n-queens' placement, where 'Q' and '.' both indicate a queen and an empty space, respectively.

 

Example 1:


Input: n = 4
Output: [[".Q..","...Q","Q...","..Q."],["..Q.","Q...","...Q",".Q.."]]
Explanation: There exist two distinct solutions to the 4-queens puzzle as shown above
Example 2:

Input: n = 1
Output: [["Q"]]
 

Constraints:

1 <= n <= 9

********Code*********

class Solution {
    // public boolean isSafe(int row, int col, char[][] board){
    //     int tempRow = row;
    //     int tempCol = col;
    //     //left upper diagonal check
    //     while(col >= 0 && row >= 0){
    //         if(board[row][col] == 'Q'){
    //             return false;
    //         }
    //         row--;
    //         col--;
    //     }

    //     row = tempRow;
    //     col = tempCol;
    //     //left check
    //     while(col >= 0){
    //         if(board[row][col] == 'Q'){
    //             return false;
    //         }
    //         col--;
    //     }

        
    //     row = tempRow;
    //     col = tempCol;
    //     //left lower diagonal check
    //     while(col >= 0 && row < board.length){
    //         if(board[row][col] == 'Q'){
    //             return false;
    //         }
    //         col--;
    //         row++;
    //     }
    //     return true;
    // }
    // public void  solve(int col, List<List<String>> res, char[][] board, int n){
    //     if(col == n){
    //         res.add(construct(board));
    //         return;
    //     }

    //     for(int row=0; row<n; row++){
    //         if(isSafe(row, col, board)){
    //             board[row][col] = 'Q';
    //             solve(col+1, res, board, n);
    //             board[row][col] = '.';
    //         }
    //     }
    // }
    // public List<String> construct(char[][] board){
    //     List<String> res = new ArrayList<String>();
    //     for(int i=0; i<board.length; i++){
    //         String s = new String(board[i]);
    //         res.add(s);
    //     }
    //     return res;
    // }
    //Approach 2 Code

    public void solve(int col, char[][] board, List<List<String>> res, int[] leftRow, int[] leftUpperDiagonal,
    int[] leftLowerDiagonal){
        if(col == board.length){
            res.add(construct(board));
            return;
        }
        for(int row = 0; row < board.length; row++){
            if(leftRow[row] == 0 && leftLowerDiagonal[row + col] == 0 && leftUpperDiagonal[board.length - 1 + col - row] == 0 ){
                leftRow[row] = 1;
                leftLowerDiagonal[row + col] = 1;
                leftUpperDiagonal[board.length - 1 + col - row] = 1;
                board[row][col] = 'Q';
                solve(col + 1, board, res, leftRow, leftUpperDiagonal, leftLowerDiagonal);
                leftRow[row] = 0;
                leftLowerDiagonal[row + col] = 0;
                leftUpperDiagonal[board.length - 1 + col - row] = 0;
                board[row][col] = '.';
            }
        }
    }

    public List<String> construct(char[][] board){
        List<String> res = new ArrayList<String>();
        for(int i = 0; i < board.length; i++){
            String s = new String(board[i]);
            res.add(s);
        }
        return res;
    }
    public List<List<String>> solveNQueens(int n) {
        //Approach 1: TC: O(n!*n) SC:O(n^2)
        // char[][] board = new char[n][n];

        // for(int i=0; i<n; i++){
        //     for(int j=0; j<n; j++){
        //         board[i][j] = '.';
        //     }
        // }

        // List<List<String>> res = new ArrayList<List<String>>();
        // solve(0, res, board, n);

        // return res;

        //Approach 2: TC: O(n!*n) SC:O(n)
        char[][] board = new char[n][n];

        for(int i = 0; i < n; i++){
            for(int j = 0; j < n; j++){
                board[i][j] = '.';
            }
        }

        List<List<String>> res = new ArrayList<List<String>>();
        int[] leftRow = new int[n];
        int[] leftUpperDiagonal = new int[2 * n - 1];
        int[] leftLowerDiagonal = new int[2 * n - 1];

        solve(0, board, res, leftRow, leftUpperDiagonal, leftLowerDiagonal);

        return res;

    }

}